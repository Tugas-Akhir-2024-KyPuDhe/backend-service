generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  // directUrl = env("DIRECT_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  uuid      String   @unique @default(uuid())
  username  String   @unique
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  roles    Role[]
  staff    Staff[]
  students Student[]
}

model Role {
  id        Int      @id @default(autoincrement())
  uuid      String   @unique @default(uuid())
  name      String
  user      User     @relation(fields: [id], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  permissions Permission[]
}

model Permission {
  id          Int      @id @default(autoincrement())
  uuid        String   @unique @default(uuid())
  name        String
  description String?
  roleId      Int?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  role Role? @relation(fields: [roleId], references: [id])
}

model Staff {
  id         Int       @id @default(autoincrement())
  uuid       String    @default(uuid())
  name       String
  birthPlace String?
  address    String?
  phone      String?
  email      String?
  gender     String?
  mapel      String[]
  nip        String?   @unique
  type       String
  position   String?
  startDate  DateTime
  endDate    DateTime?
  mediaId    Int?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  user           User             @relation(fields: [id], references: [id])
  photo          Media?           @relation(fields: [mediaId], references: [id])
  Class          Class[]
  Student        Student[]
  CourseInClass  CourseInClass[]
  StudentsGrades StudentsGrades[]
}

model Student {
  id          Int       @id @default(autoincrement())
  uuid        String    @default(uuid())
  name        String
  classId     Int?
  waliKelasId Int?
  status      String?   @default("New") // New | Active | Alumni | Stay
  birthPlace  String?
  address     String?
  phone       String?
  email       String?
  gender      String?
  majorCode   String?
  nis         String    @unique
  nisn        String    @unique
  startYear   DateTime
  endYear     DateTime?
  mediaId     Int?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  user      User   @relation(fields: [id], references: [id])
  photo     Media? @relation(fields: [mediaId], references: [id])
  class     Class? @relation(fields: [classId], references: [id])
  waliKelas Staff? @relation(fields: [waliKelasId], references: [id])

  ParentOfStudent         ParentOfStudent[]         @relation("ParentsOfStudent")
  HistoryClass            HistoryClass[]
  Major                   Major?                    @relation(fields: [majorCode], references: [majorCode])
  StudentsGrades          StudentsGrades[]
  StudentPositionInClass  StudentPositionInClass[]
  StudentDetailAttendance StudentDetailAttendance[]
}

model AcademicYear {
  id          Int      @id @default(autoincrement())
  uuid        String   @default(uuid())
  name        String
  description String?
  status      String   @default("Active")
  createdBy   String?
  updateBy    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model HistoryClass {
  id             Int      @id @default(autoincrement())
  uuid           String?  @default(uuid())
  studentId      Int
  oldClassId     Int?
  currentClassId Int
  academicYear   String
  status         String?  @default("Aktif") // naik | lulus | tinggal
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  student           Student          @relation(fields: [studentId], references: [id])
  oldClass          Class?           @relation(fields: [oldClassId], references: [id], name: "OldClassRelation")
  currentClass      Class            @relation(fields: [currentClassId], references: [id], name: "CurrentClassRelation")
  StudentsinClass   StudentsinClass? @relation(fields: [studentsinClassId], references: [id])
  studentsinClassId Int?
}

model Media {
  id        Int      @id @default(autoincrement())
  uuid      String   @default(uuid())
  url       String
  type      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Article         Article[]         @relation("ArticleMedia") //one to many from artikel
  Major           Major[]           @relation("MajorMedia")
  Extracurricular Extracurricular[] @relation("ExtracurricularMedia")
  Facility        Facility[]        @relation("FacilityMedia")
  Galeri          Galeri[]          @relation("GaleriMedia")
  staff           Staff[] //one to one
  students        Student[]
  ConfigSchool    ConfigSchool[]

  ArticleBanner  Article[]
  BannerPage     BannerPage[]
  Course         Course[]
  StudentinClass StudentsinClass[]
  ProblemReport  ProblemReport[]
}

model ConfigSchool {
  id            Int      @id @default(autoincrement())
  uuid          String   @default(uuid())
  name          String
  historySchool String?
  about         String
  vision        String?
  mission       String?
  address       String?
  mediaId       Int?
  telp          String?
  email         String
  maps          String?
  npsn          String
  fb            String?
  ig            String?
  tiktok        String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  logo Media? @relation(fields: [mediaId], references: [id])
}

model Article {
  id          Int      @id @default(autoincrement())
  uuid        String   @default(uuid())
  bannerId    Int?
  title       String
  description String
  status      String
  type        String
  category    String?
  createdBy   String?
  updateBy    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  banner Media?  @relation(fields: [bannerId], references: [id])
  media  Media[] @relation("ArticleMedia")
}

model Class {
  id           Int      @id @default(autoincrement())
  uuid         String   @default(uuid())
  name         String
  description  String?
  majorCode    String?
  staffId      Int?
  status       Int?     @default(1) // 1= active, 2=end
  academicYear String?
  capacity     Int?     @default(30)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  major                  Major?                   @relation(fields: [majorCode], references: [majorCode])
  homeRoomTeacher        Staff?                   @relation(fields: [staffId], references: [id])
  HistoryClassOld        HistoryClass[]           @relation("OldClassRelation")
  HistoryClassNew        HistoryClass[]           @relation("CurrentClassRelation")
  CourseInClass          CourseInClass[]
  StudentsGrades         StudentsGrades[]
  StudentPositionInClass StudentPositionInClass[]
  StudentAttendance      StudentAttendance[]
  student                StudentsinClass[]
  mainStudent            Student[]
}

model StudentsinClass {
  id         Int       @id @default(autoincrement())
  uuid       String    @default(uuid())
  name       String
  classId    Int?
  status     String?   @default("Active") // Active | Alumni | Stay
  birthPlace String?
  address    String?
  phone      String?
  email      String?
  gender     String?
  majorCode  String?
  nis        String
  nisn       String
  startYear  DateTime
  endYear    DateTime?
  mediaId    Int?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  photo Media? @relation(fields: [mediaId], references: [id])
  class Class? @relation(fields: [classId], references: [id])

  HistoryClass            HistoryClass[]
  Major                   Major?                    @relation(fields: [majorCode], references: [majorCode])
  StudentsGrades          StudentsGrades[]
  StudentPositionInClass  StudentPositionInClass[]
  StudentDetailAttendance StudentDetailAttendance[]
}

model Major {
  id          Int      @id @default(autoincrement())
  uuid        String   @default(uuid())
  majorCode   String?  @unique
  name        String
  description String?
  prioritas   Int      @default(15)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  media          Media[]           @relation("MajorMedia")
  student        Student[]
  class          Class[]
  StudentinClass StudentsinClass[]
}

model Extracurricular {
  id          Int      @id @default(autoincrement())
  uuid        String   @default(uuid())
  name        String
  description String?
  prioritas   Int      @default(15)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  media Media[] @relation("ExtracurricularMedia")
}

model Facility {
  id          Int      @id @default(autoincrement())
  uuid        String   @default(uuid())
  name        String
  description String?
  prioritas   Int      @default(15)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  media Media[] @relation("FacilityMedia")
}

model BannerPage {
  id          Int      @id @default(autoincrement())
  uuid        String   @default(uuid())
  title       String
  description String?
  title_link  String?
  link        String?
  status      String?
  prioritas   Int      @default(15)
  bannerId    Int?
  createdBy   String?
  updateBy    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  banner      Media?   @relation(fields: [bannerId], references: [id])
}

model ParentOfStudent {
  id            Int      @id @default(autoincrement())
  uuid          String   @default(uuid())
  fatherName    String
  motherName    String
  parentJob     String?
  parentAddress String?
  phone         String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  student Student[] @relation("ParentsOfStudent")
}

model Galeri {
  id          Int      @id @default(autoincrement())
  uuid        String   @default(uuid())
  name        String
  description String?
  prioritas   Int      @default(15)
  status      String   @default("Active")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  media Media[] @relation("GaleriMedia")
}

model Course {
  id          Int      @id @default(autoincrement())
  uuid        String   @default(uuid())
  name        String
  code        String   @unique
  grade       String
  description String?
  imageId     Int?
  status      String   @default("Active")
  formulaId   Int?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  formula        GradeFormula?    @relation(fields: [formulaId], references: [id])
  image          Media?           @relation(fields: [imageId], references: [id])
  CourseInClass  CourseInClass[]
  StudentsGrades StudentsGrades[]
}

model CourseInClass {
  id         Int      @id @default(autoincrement())
  uuid       String   @default(uuid())
  courseCode String
  teacherId  Int
  classId    Int
  day        String
  timeStart  String
  timeEnd    String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  courseDetail Course? @relation(fields: [courseCode], references: [code])
  teacher      Staff?  @relation(fields: [teacherId], references: [id])
  class        Class?  @relation(fields: [classId], references: [id])
}

model StudentsGrades {
  id           Int      @id @default(autoincrement())
  uuid         String   @default(uuid())
  academicYear String?
  nis          String
  teacherId    Int
  classId      Int
  courseCode   String
  task         Int?
  UH           Int?
  PTS          Int?
  PAS          Int?
  portofolio   Int?
  proyek       Int?
  attitude     Int?
  finalGrade   Int?
  description  String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  student           Student?         @relation(fields: [nis], references: [nis])
  course            Course?          @relation(fields: [courseCode], references: [code])
  teacher           Staff?           @relation(fields: [teacherId], references: [id])
  class             Class?           @relation(fields: [classId], references: [id])
  StudentsinClass   StudentsinClass? @relation(fields: [studentsinClassId], references: [id])
  studentsinClassId Int?
}

model StudentPositionInClass {
  id           Int      @id @default(autoincrement())
  uuid         String   @default(uuid())
  nis          String
  classId      Int
  positionName String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  student           Student?         @relation(fields: [nis], references: [nis])
  class             Class?           @relation(fields: [classId], references: [id])
  StudentsinClass   StudentsinClass? @relation(fields: [studentsinClassId], references: [id])
  studentsinClassId Int?
}

model StudentAttendance {
  id        Int       @id @default(autoincrement())
  uuid      String    @unique @default(uuid())
  classId   Int
  date      DateTime
  startTime DateTime?
  endTime   DateTime?
  status    Int       @default(0) //1 = final, 0 = pending
  notes     String?
  createdBy String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  class                    Class?                    @relation(fields: [classId], references: [id])
  detailAttendanceStudents StudentDetailAttendance[]
}

model StudentDetailAttendance {
  id           Int       @id @default(autoincrement())
  uuid         String    @unique @default(uuid())
  attendanceId Int
  nis          String
  checkInTime  DateTime?
  checkOutTime DateTime?
  status       Int       @default(1) //1 = hadir, 2 = izin, 3 = sakir
  notes        String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  attendance        StudentAttendance @relation(fields: [attendanceId], references: [id])
  student           Student?          @relation(fields: [nis], references: [nis])
  StudentsinClass   StudentsinClass?  @relation(fields: [studentsinClassId], references: [id])
  studentsinClassId Int?
}

model StudyTracer {
  id                     Int      @id @default(autoincrement())
  uuid                   String   @unique @default(uuid())
  name                   String
  ttl                    String?
  gender                 String
  address                String
  addressNow             String?
  phone                  String
  email                  String
  startYear              String
  endYear                String
  employmentStatus       String
  institutionName        String?
  institutionAddress     String?
  isSatisfactionMet      String?
  disSatisfactionFactors String?
  studyIssues            String?
  statusApprove          String   @default("Pending")
  createdAt              DateTime @default(now())
  updatedAt              DateTime @updatedAt
}

model ProblemReport {
  id                 Int      @id @default(autoincrement())
  uuid               String   @unique @default(uuid())
  idName             String
  pageProblem        String
  problemDescription String
  mediaId            Int?
  telp               String
  status             String   @default("baru")
  createdBy          String
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  media              Media?   @relation(fields: [mediaId], references: [id])
}

model GradeFormula {
  id          Int      @id @default(autoincrement())
  uuid        String   @unique @default(uuid())
  name        String
  description String?
  status      Int      @default(1)
  createdBy   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  components GradeComponent[]
  Course     Course[]
}

model GradeComponent {
  id          Int     @id @default(autoincrement())
  uuid        String  @unique @default(uuid())
  name        String // Contoh: "Pengetahuan" atau "Keterampilan"
  description String?
  weight      Float // Bobot dalam desimal (0-1), contoh: 0.4 untuk 40%
  type        String // Bisa "main" atau "sub" untuk membedakan komponen utama dan subkomponen

  // Relasi ke formula induk
  formulaId Int
  formula   GradeFormula @relation(fields: [formulaId], references: [id])

  // Relasi ke parent component (untuk subkomponen)
  parentId Int?
  parent   GradeComponent? @relation("ComponentRelation", fields: [parentId], references: [id])

  // Relasi ke subkomponen
  children GradeComponent[] @relation("ComponentRelation")

  createdBy String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
